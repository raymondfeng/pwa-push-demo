// This function is needed because Chrome doesn't accept a base64 encoded string
// as value for applicationServerKey in pushManager.subscribe yet
// https://bugs.chromium.org/p/chromium/issues/detail?id=802280
function urlBase64ToUint8Array(base64String) {
  var padding = '='.repeat((4 - (base64String.length % 4)) % 4);
  var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');

  var rawData = window.atob(base64);
  var outputArray = new Uint8Array(rawData.length);

  for (var i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

// Register a Service Worker.
navigator.serviceWorker.register('service-worker.js');

document.getElementById('doIt').onclick = async function () {
  const registration = await navigator.serviceWorker.ready;
  const result = await Notification.requestPermission();
  console.log('Notification permission status:', result);
  if (result !== 'granted') {
    return;
  }

  const subscription = await registration.pushManager.getSubscription();
  if (subscription) {
    console.log('Found existing subscription: %O', subscription.toJSON());
    await subscription.unsubscribe();
  }

  // Get the server's public key
  const response = await fetch('./vapidPublicKey');
  const vapidPublicKey = await response.text();
  // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
  // urlBase64ToUint8Array() is defined in /tools.js
  const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

  // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
  // send notifications that don't have a visible effect for the user).
  const pubSubscription = await registration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: convertedVapidKey,
  });

  // Send the subscription details to the server using the Fetch API.
  await fetch('./register', {
    method: 'post',
    headers: {
      'Content-type': 'application/json',
    },
    body: JSON.stringify({
      subscription: pubSubscription,
    }),
  });

  const payload = document.getElementById('notification-payload').value;
  const delay = document.getElementById('notification-delay').value;
  const ttl = document.getElementById('notification-ttl').value;

  // Ask the server to send the client a notification (for testing purposes, in actual
  // applications the push notification is likely going to be generated by some event
  // in the server).
  fetch('./sendNotification', {
    method: 'post',
    headers: {
      'Content-type': 'application/json',
    },
    body: JSON.stringify({
      subscription: pubSubscription,
      payload: payload,
      delay: delay,
      ttl: ttl,
    }),
  });
};
